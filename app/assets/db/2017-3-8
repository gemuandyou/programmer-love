{
  "noteData": "<pre><pre><pre><pre><pre><pre><pre><span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h1</span>-SpringBoot的一些用法\n\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-动态配置@Scheduled的参数\n从application.properties的SpringBoot配置文件中动态配置Scheduled的参数。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@ol</span>-(#写好需要定时执行的任务方法 #创建一个类实现SchedulingConfigurer接口，并将此类用@EnableScheduling和@Configuration修饰)<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@tab</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@pre</span>-@[<pre style=\"font-family: Monaco,'Lucida Console',monospace;\"><div style=\"font-family: fantasy;color: thistle; user-select: none;\">java</div><div style=\"background-color: #f1f1f1\">@Component\r\n<span style=\"font-weight: bold; color: dodgerblue\">public</span> <span style=\"font-weight: bold; color: dodgerblue\">class</span> ScheduledTask {\r\n\t<span style=\"font-weight: bold; color: dodgerblue\">public</span> <span style=\"font-weight: bold; color: dodgerblue\">void</span> monitorApi() {\r\n\t\t// to <span style=\"font-weight: bold; color: dodgerblue\">do</span> something\r\n\t}\r\n};</div></pre>]@ <span contenteditable=\"false\" style=\"color: rgb(0, 192, 255);\">@pre</span>-@[<pre style=\"font-family: Monaco,'Lucida Console',monospace;\"><div style=\"font-family: fantasy;color: thistle; user-select: none;\">java</div><div style=\"background-color: #f1f1f1;\">@Configuration\r\n@EnableScheduling\r\n<span style=\"font-weight: bold; color: dodgerblue\">public</span> <span style=\"font-weight: bold; color: dodgerblue\">class</span> ScheduledDynamicTask <span style=\"font-weight: bold; color: dodgerblue\">implements</span> SchedulingConfigurer {\r\n\r\n    @Value(&quot;${schedule-fixed-rate}&quot;)\r\n    <span style=\"font-weight: bold; color: dodgerblue\">private</span> <span style=\"font-weight: bold; color: dodgerblue\">Integer</span> fixedRate;\r\n\r\n    @Autowired\r\n    ScheduledTask scheduledTask;\r\n\r\n    @Override\r\n    <span style=\"font-weight: bold; color: dodgerblue\">public</span> <span style=\"font-weight: bold; color: dodgerblue\">void</span> configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {\r\n        scheduledTaskRegistrar.addFixedRateTask(<span style=\"font-weight: bold; color: dodgerblue\">new</span> Runnable() {\r\n            @Override\r\n            <span style=\"font-weight: bold; color: dodgerblue\">public</span> <span style=\"font-weight: bold; color: dodgerblue\">void</span> run() {\r\n                scheduledTask.monitorApi();\r\n            }\r\n        }, fixedRate.longValue());\r\n    }\r\n}</div></pre>]@ \napplication.properties内容如下：<span contenteditable=\"false\" style=\"color: rgb(0, 192, 255);\">@pre</span>-@[<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:10.5pt;\"><span style=\"color:#cc7832;\">schedule-fixed-rate</span><span style=\"color:#808080;\">=</span><span style=\"color:#6a8759;\">5000</span></pre>]@ \n\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-事务的配置\nspringboot的事务配置很简单，只要在对应的service上添加<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Transaction  就可以了。\n如果项目比较大，需要多个事务管理器，那么就需要在<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>Application  启动类中实现<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>TransactionManagementConfigurer  类，同时将该Application加上注解<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@EnableTransactionManagement 。配置如下：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@EnableTransactionManagement\n@SpringBootApplication\npublic class Application implements TransactionManagementConfigurer {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run( Application.class, args);\n\t}\n\n\t@Bean(name = \"txManager\")\n\tpublic PlatformTransactionManager txManager(DataSource dataSource) {\n\t\treturn new DataSourceTransactionManager(dataSource);\n\t}\n\n\t@Resource(name = \"txManager\")\n\tprivate PlatformTransactionManager txManager;\n\n\t@Override\n\tpublic PlatformTransactionManager annotationDrivenTransactionManager() {\n\t\treturn txManager;\n\t}\n}]@ 在使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Transaction  的时候加上事务管理的<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@b</span>-name 就可以了。如：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@Transaction(value=\"txManager\")]@ \n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-获取配置文件的变量\n获取配置文件中的变量值，我们可以用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Value 。也可以用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>org.springframework.core.env.Environment :<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@Autowired\nEnvironment environment;]@\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-拦截器\n首先需要看下<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[http://docs.spring.io/spring-boot/docs/1.5.3.RELEASE/reference/htmlsingle/]spring-boot官方文档 。他是这样说的：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[If you want to keep Spring Boot MVC features, and you just want to add additional MVC configuration (interceptors, formatters, view controllers etc.) \nyou can add your own @Configuration class of type WebMvcConfigurerAdapter, but without @EnableWebMvc. \nIf you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter or ExceptionHandlerExceptionResolver \nyou can declare a WebMvcRegistrationsAdapter instance providing such components.]@  \\\n意思就是要写一个类去继承<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>WebMvcConfigurerAdapter  并将该类用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Configuration  注解标注。然后去重写<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-blue-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>addInterceptors(InterceptorRegistry&amp;nbsp;registry) 方法,这个方法有个拦截器注册中心对象，我们可以通过他的<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-blue-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>addInterceptor() 方法来进行自定义拦截器的添加。\n那么下面就需要定义一个自定义的拦截器了。自定义的拦截器可以继承或实现<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>RequestMappingHandlerMapping、RequestMappingHandlerAdapter、ExceptionHandlerExceptionResolver  等。但一般会实现<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>HandlerInterceptor  。自定义拦截器代码如下：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@Component\npublic class SupplierVerificationInterceptor implements HandlerInterceptor {\n\n    /**\n     * 请求处理之前调用。这时还没有调用Controller中的方法\n     * @param httpServletRequest\n     * @param httpServletResponse\n     * @param o\n     * @return\n     * @throws Exception\n     */\n    @Override\n    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception {\n        return true;\n    }\n\n    /**\n     * 请求处理之后，试图渲染之前调用\n     * @param httpServletRequest\n     * @param httpServletResponse\n     * @param o\n     * @param modelAndView\n     * @throws Exception\n     */\n    @Override\n    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {\n        // TODO 2017-5-23 进行运营端身份验证\n        System.out.println(&amp;quot;......................... supplier interceptor .........................&amp;quot;);\n    }\n\n    /**\n     * 请求处理完成，试图渲染完成后调用\n     * @param httpServletRequest\n     * @param httpServletResponse\n     * @param o\n     * @param e\n     * @throws Exception\n     */\n    @Override\n    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {\n\n    }\n}]@ \\\n自定义拦截器写好以后，可以放入到Spring IOC容器中，然后自动注入到WebMvcConfigurer中，通过注册中心添加此拦截器和所需要拦截的路径。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS: 这里我们也可以new一个拦截器，而不使用Spring IOC容器。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@Configuration\n@ComponentScan\npublic class WebMvcConfigurer extends WebMvcConfigurerAdapter {\n\n    @Autowired\n    SupplierVerificationInterceptor supplierVerificationInterceptor;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(supplierVerificationInterceptor).addPathPatterns(&amp;quot;/supplier/**&amp;quot;);\n        super.addInterceptors(registry);\n    }\n}]@\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS: 在使用自动注入自定义拦截器的时候，会提示自动注入失败。<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-@fc-red-&gt;error -@[Could not autowire. No beans of 'SupplierVerificationInterceptor' type found.]@ \\\n这时我们需要在这个类上添加<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@ComponentScan  注解来扫描注入到IOC容器中的类。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-SpringBoot中添加Servlet\\Filter\\Listener\n将自定义的Servlet\\Filter\\Listener上用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@WebServlet、@WebFilter、@WebListener  注解自动注册。然后在<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>SpringBootApplication  上使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@ServletComponentScan  等注解就可以了。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-SpringBoot中的日志\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[http://docs.spring.io/spring-boot/docs/1.5.4.RELEASE/reference/htmlsingle/#boot-features-logging-format]官网介绍\n这里主要说一下logback的配置。\n<span contenteditable=\"false\" style=\"color: rgb(0, 192, 255);\">@pre</span>-@[<pre style=\"overflow: auto; border-radius: 0.5rem;padding: 0.5rem;line-height: 1.4; color: rgb(0, 0, 0); font-size: 15px; padding: 6px 10px; background-color: rgb(248, 248, 248); border: 1px solid rgb(204, 204, 204); border-radius: 3px; clear: both; overflow: auto; font-family: Consolas, &quot;Liberation Mono&quot;, Courier, monospace; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-tag\" style=\"color: rgb(63, 127, 127);\">&lt;springProfile</span> <span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-attribute\" style=\"color: rgb(127, 0, 127);\">name</span>=<span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-value\" style=\"color: rgb(42, 0, 255);\">\"staging\"</span><span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-tag\" style=\"color: rgb(63, 127, 127);\">&gt;</span>\n    <span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-comment\" style=\"color: rgb(63, 95, 95); font-style: italic;\">&lt;!-- configuration to be enabled when the \"staging\" profile is active --&gt;</span>\n<span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-tag\" style=\"color: rgb(63, 127, 127);\">&lt;/springProfile&gt;</span>\n\n<span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-tag\" style=\"color: rgb(63, 127, 127);\">&lt;springProfile</span> <span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-attribute\" style=\"color: rgb(127, 0, 127);\">name</span>=<span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-value\" style=\"color: rgb(42, 0, 255);\">\"dev, staging\"</span><span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-tag\" style=\"color: rgb(63, 127, 127);\">&gt;</span>\n    <span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-comment\" style=\"color: rgb(63, 95, 95); font-style: italic;\">&lt;!-- configuration to be enabled when the \"dev\" or \"staging\" profiles are active --&gt;</span>\n<span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-tag\" style=\"color: rgb(63, 127, 127);\">&lt;/springProfile&gt;</span>\n\n<span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-tag\" style=\"color: rgb(63, 127, 127);\">&lt;springProfile</span> <span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-attribute\" style=\"color: rgb(127, 0, 127);\">name</span>=<span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-value\" style=\"color: rgb(42, 0, 255);\">\"!production\"</span><span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-tag\" style=\"color: rgb(63, 127, 127);\">&gt;</span>\n    <span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-comment\" style=\"color: rgb(63, 95, 95); font-style: italic;\">&lt;!-- configuration to be enabled when the \"production\" profile is not active --&gt;</span>\n<span xmlns:d=\"http://docbook.org/ns/docbook\" class=\"hl-tag\" style=\"color: rgb(63, 127, 127);\">&lt;/springProfile&gt;</span></pre>]@ 这是官网的例子。<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>springProfile  是说的套用哪个模式。<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>name  值的是使用的<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>application.properties  中的<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>spring.profiles.active  。\n而在<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>springProfile  的子标签中，使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>appender  标签可以指定日志的输出源。这个输出源一般有三种方式。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@ul</span>-(#远程，使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>ch.qos.logback.more.appenders.DataFluentAppender  类#控制台，使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>ch.qos.logback.core.ConsoleAppender  类#文件，使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>ch.qos.logback.core.FileAppender  类)、\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-SpringBoot中的AOP\nspringboot中的aop使用起来非常方便，只需要在<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>pom.xml  中引入<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>spring-boot-starter-aop  即可。这个aop启动器中会包含<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>spring-aop、aspectjweaver  这两个包。\n用法也非常简单。只需要在Aop类上标注<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Aspect  这个注解就可以了。然后使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Pointcut、@Before、@After、@Around  来进行处理就可以了。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-ececec-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Before  表示在所拦截方法执行前执行一段程序。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-ececec-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@After  表示在所拦截方法执行之后执行一段程序。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-ececec-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Around  可以同时在拦截方法执行前后分别执行一段程序。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-ececec-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Pointcut  表示设置切点来判断哪些方法或类需要执行切面处理。这个判断是通过一个表达式来验证。下面来说一下这个表达式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[http://www.cnblogs.com/rainy-shurun/p/5195439.html]参考1  、<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[http://blog.csdn.net/terryzero/article/details/4128858]参考2\n这里只说下<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>execution  。格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern)throws-pattern?)]@、\n其中带有问号的表示非必须的。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-ececec-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>ret-type-pattern  表示返回值。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-ececec-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>name-pattern  表示方法名。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-ececec-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>(param-pattern) 表示方法参数类型。如：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>(String)  表示参数为String类型。<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>(..)  表示所有参数。<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>(*)  表示一个参数。<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>(*,String)  表示第一个参数任意，第二个参数为String类型。\n示例：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@Aspect\n@Component\npublic class XxAop {\n\n    @Pointcut(&amp;quot;execution (* com.gemu.*.controller..*.*(..))&amp;quot;)  // controller..表示子包\n    public void controllerAspect() {\n    }\n\n    @Around(&amp;quot;controllerAspect()&amp;quot;)\n    public Object handle(ProceedingJoinPoint point) throws Throwable {\n        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder\n            .getRequestAttributes()).getRequest();\n        long start = System.currentTimeMillis();\n        try {\n            System.out.println(JSON.toJSONString(request.getParameterMap()));\n            return point.proceed();\n        } catch (Exception ex) {\n            throw ex;\n        } finally {\n            long end = System.currentTimeMillis();\n            long time = end - start;\n            System.out.println(time);\n        }\n    }\n}]@\\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-SpringMVC中的异常处理\nspringmvc项目中，如果要对异常进行统一处理，可以自定义一个类去实现<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>HandlerExceptionResolver  接口。示例：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"edit-span\">@code</span>-java-@[@Component\npublic class CustomExceptionHandler implements HandlerExceptionResolver {\n    @Override\n    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();\n        map.put(&amp;quot;errorMsg&amp;quot;, ex.getMessage());\n        MappingJackson2JsonView v = new MappingJackson2JsonView();\n        ModelAndView view = new ModelAndView(v, map);\n        return view;\n    }\n}]@ 这样，当系统出现异常的时候，系统会封装errorMsg信息返回给前端。</pre></pre></pre></pre></pre></pre></pre>",
  "noteName": "2017-3-8",
  "tags": "SpringBoot"
}