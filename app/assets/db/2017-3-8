{
  "noteData": "<pre><pre><pre><pre><pre><pre><pre><span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h1</span>-SpringBoot的一些用法\n\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-动态配置@Scheduled的参数\n从application.properties的SpringBoot配置文件中动态配置Scheduled的参数。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@ol</span>-(#写好需要定时执行的任务方法 #创建一个类实现SchedulingConfigurer接口，并将此类用@EnableScheduling和@Configuration修饰)<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@tab</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@pre</span>-@[<pre style=\"font-family: Monaco,'Lucida Console',monospace;\"><div style=\"font-family: fantasy;color: thistle; user-select: none;\">java</div><div style=\"background-color: #f1f1f1\">@Component\r\n<span style=\"font-weight: bold; color: dodgerblue\">public</span> <span style=\"font-weight: bold; color: dodgerblue\">class</span> ScheduledTask {\r\n\t<span style=\"font-weight: bold; color: dodgerblue\">public</span> <span style=\"font-weight: bold; color: dodgerblue\">void</span> monitorApi() {\r\n\t\t// to <span style=\"font-weight: bold; color: dodgerblue\">do</span> something\r\n\t}\r\n};</div></pre>]@ <span contenteditable=\"false\" style=\"color: rgb(0, 192, 255);\">@pre</span>-@[<pre style=\"font-family: Monaco,'Lucida Console',monospace;\"><div style=\"font-family: fantasy;color: thistle; user-select: none;\">java</div><div style=\"background-color: #f1f1f1;\">@Configuration\r\n@EnableScheduling\r\n<span style=\"font-weight: bold; color: dodgerblue\">public</span> <span style=\"font-weight: bold; color: dodgerblue\">class</span> ScheduledDynamicTask <span style=\"font-weight: bold; color: dodgerblue\">implements</span> SchedulingConfigurer {\r\n\r\n    @Value(&quot;${schedule-fixed-rate}&quot;)\r\n    <span style=\"font-weight: bold; color: dodgerblue\">private</span> <span style=\"font-weight: bold; color: dodgerblue\">Integer</span> fixedRate;\r\n\r\n    @Autowired\r\n    ScheduledTask scheduledTask;\r\n\r\n    @Override\r\n    <span style=\"font-weight: bold; color: dodgerblue\">public</span> <span style=\"font-weight: bold; color: dodgerblue\">void</span> configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {\r\n        scheduledTaskRegistrar.addFixedRateTask(<span style=\"font-weight: bold; color: dodgerblue\">new</span> Runnable() {\r\n            @Override\r\n            <span style=\"font-weight: bold; color: dodgerblue\">public</span> <span style=\"font-weight: bold; color: dodgerblue\">void</span> run() {\r\n                scheduledTask.monitorApi();\r\n            }\r\n        }, fixedRate.longValue());\r\n    }\r\n}</div></pre>]@ \napplication.properties内容如下：<span contenteditable=\"false\" style=\"color: rgb(0, 192, 255);\">@pre</span>-@[<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:10.5pt;\"><span style=\"color:#cc7832;\">schedule-fixed-rate</span><span style=\"color:#808080;\">=</span><span style=\"color:#6a8759;\">5000</span></pre>]@ \n\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-事务的配置\nspringboot的事务配置很简单，只要在对应的service上添加<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Transaction  就可以了。\n如果项目比较大，需要多个事务管理器，那么就需要在<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>Application  启动类中实现<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>TransactionManagementConfigurer  类，同时将该Application加上注解<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@EnableTransactionManagement 。配置如下：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@EnableTransactionManagement\n@SpringBootApplication\npublic class Application implements TransactionManagementConfigurer {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run( Application.class, args);\n\t}\n\n\t@Bean(name = \"txManager\")\n\tpublic PlatformTransactionManager txManager(DataSource dataSource) {\n\t\treturn new DataSourceTransactionManager(dataSource);\n\t}\n\n\t@Resource(name = \"txManager\")\n\tprivate PlatformTransactionManager txManager;\n\n\t@Override\n\tpublic PlatformTransactionManager annotationDrivenTransactionManager() {\n\t\treturn txManager;\n\t}\n}]@ 在使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Transaction  的时候加上事务管理的<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@b</span>-name 就可以了。如：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@Transaction(value=\"txManager\")]@ \n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-获取配置文件的变量\n获取配置文件中的变量值，我们可以用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Value 。也可以用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>org.springframework.core.env.Environment :<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@Autowired\nEnvironment environment;]@\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-拦截器\n首先需要看下<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[http://docs.spring.io/spring-boot/docs/1.5.3.RELEASE/reference/htmlsingle/]spring-boot官方文档 。他是这样说的：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[If you want to keep Spring Boot MVC features, and you just want to add additional MVC configuration (interceptors, formatters, view controllers etc.) \nyou can add your own @Configuration class of type WebMvcConfigurerAdapter, but without @EnableWebMvc. \nIf you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter or ExceptionHandlerExceptionResolver \nyou can declare a WebMvcRegistrationsAdapter instance providing such components.]@  \\\n意思就是要写一个类去继承<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>WebMvcConfigurerAdapter  并将该类用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@Configuration  注解标注。然后去重写<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-blue-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>addInterceptors(InterceptorRegistry&amp;nbsp;registry) 方法,这个方法有个拦截器注册中心对象，我们可以通过他的<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-blue-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>addInterceptor() 方法来进行自定义拦截器的添加。\n那么下面就需要定义一个自定义的拦截器了。自定义的拦截器可以继承或实现<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>RequestMappingHandlerMapping、RequestMappingHandlerAdapter、ExceptionHandlerExceptionResolver  等。但一般会实现<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>HandlerInterceptor  。自定义拦截器代码如下：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@Component\npublic class SupplierVerificationInterceptor implements HandlerInterceptor {\n\n    /**\n     * 请求处理之前调用。这时还没有调用Controller中的方法\n     * @param httpServletRequest\n     * @param httpServletResponse\n     * @param o\n     * @return\n     * @throws Exception\n     */\n    @Override\n    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception {\n        return true;\n    }\n\n    /**\n     * 请求处理之后，试图渲染之前调用\n     * @param httpServletRequest\n     * @param httpServletResponse\n     * @param o\n     * @param modelAndView\n     * @throws Exception\n     */\n    @Override\n    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {\n        // TODO 2017-5-23 进行运营端身份验证\n        System.out.println(&amp;quot;......................... supplier interceptor .........................&amp;quot;);\n    }\n\n    /**\n     * 请求处理完成，试图渲染完成后调用\n     * @param httpServletRequest\n     * @param httpServletResponse\n     * @param o\n     * @param e\n     * @throws Exception\n     */\n    @Override\n    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {\n\n    }\n}]@ \\\n自定义拦截器写好以后，可以放入到Spring IOC容器中，然后自动注入到WebMvcConfigurer中，通过注册中心添加此拦截器和所需要拦截的路径。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS: 这里我们也可以new一个拦截器，而不使用Spring IOC容器。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-java-@[@Configuration\n@ComponentScan\npublic class WebMvcConfigurer extends WebMvcConfigurerAdapter {\n\n    @Autowired\n    SupplierVerificationInterceptor supplierVerificationInterceptor;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(supplierVerificationInterceptor).addPathPatterns(&amp;quot;/supplier/**&amp;quot;);\n        super.addInterceptors(registry);\n    }\n}]@\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS: 在使用自动注入自定义拦截器的时候，会提示自动注入失败。<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-@fc-red-&gt;error -@[Could not autowire. No beans of 'SupplierVerificationInterceptor' type found.]@ \\\n这时我们需要在这个类上添加<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@ComponentScan  注解来扫描注入到IOC容器中的类。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-SpringBoot中添加Servlet\\Filter\\Listener\n将自定义的Servlet\\Filter\\Listener上用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@WebServlet、@WebFilter、@WebListener  注解自动注册。然后在<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>SpringBootApplication  上使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"edit-span\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>@ServletComponentScan  等注解就可以了。\netc</pre></pre></pre></pre></pre></pre></pre>",
  "noteName": "2017-3-8",
  "tags": "SpringBoot"
}