{
  "noteData": "<pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h1</span>-Docker <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@hr</span>- \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[https://docs.docker.com/]Document\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-安装\n卸载之前安装的\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; sudo yum remove docker docker-common container-selinux docker-selinux docker-engine]@\\\n安装docker,docker有两个版本，一个花钱，一个不花钱。安装方式有两种，一种是使用仓库安装，一种是使用rpm安装包。\n先说第一种，使用仓库安装。两个版本的仓库安装方式不一样。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@b</span>-Docker&amp;nbsp;CE\n安装依赖包\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; sudo yum install -y yum-utils device-mapper-persistent-data lvm2]@\\\n添加yum稳定的仓库（stable repository）地址，这个仓库每个季度更新一次Docker CE。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo]@\\\n（可选）添加edge repository 地址，这个默认是禁用的，仓库每个月就更新一次Docker CE。\n启用edge repository\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; sudo yum-config-manager --enable docker-ce-edge]@\\\n禁用edge repository\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; sudo yum-config-manager --disable docker-ce-edge]@\\\n安装\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; sudo yum install docker-ce]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@b</span>-Docker&amp;nbsp;EE\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[https://docs.docker.com/engine/installation/linux/centos/#install-using-the-repository]看这里，买不起，就没试。\n\n安装好以后，编辑<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>/etc/docker/daemon.json  文件。若没有就创建。并添加如下内容：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[{\n  &amp;quot;storage-driver&amp;quot;: &amp;quot;devicemapper&amp;quot;\n}]@、\n在生产环境中，必须使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>direct-lvm 模式。<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/#configure-direct-lvm-mode-for-production]为啥？\n\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-基本常用命令汇总\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-启动Docker\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; sudo systemctl start docker]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-停止Docker\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; systemctl stop docker]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-查看Docker镜像列表\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker images]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-从dockerhub上下载一个ubuntu系统镜像\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker pull ubuntu]@\\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-导出镜像ubuntu为ubuntu.tar\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker save -o ubuntu.tar ubuntu]@\\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-载入镜像\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker load &lt; ubuntu.tar #或\n&gt; docker load -i ubuntu.tar #貌似不能一次导入多个]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-加载镜像，启动一个进程\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker run --name 容器名 -d -p 80:80 镜像名（标签）#-p是将本地端口映射到容器中的端口。格式：本地端口:容器端口\n&gt; docker run -it --name 容器名 镜像名 #<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-blue-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-i  让容器的标准输入保持打开 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-blue-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-t  分配一个伪终端并绑定到容器的标准输入上。 若是没有加其中任意一个参数，启动不起来容器]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-查看端口映射情况\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker port <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-green-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>CONTAINER  <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-green-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>[PRIVATE_PORT[/PROTO]] ]@\\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-查看Docker容器列表\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker ps]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-删除Docker容器\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker rm 容器名/容器ID]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-删除Docker镜像\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker rmi 镜像ID]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-进入Docker容器中\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker exec -it 容器名 bash]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS: <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-it 中i表示interaction，t表示terminal。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker attach 容器名]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-本机与容器之间的文件拷贝\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker cp 本机文件路径 container-id:文件路径 #从本机拷到容器里\n&gt; docker cp container-id:文件路径 本机文件路径 #从容器拷到本机]@\\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-结束docker容器\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker stop 容器ID]@ \\\netc\n\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-Docker定制镜像（Dockerfile） <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@hr</span>- \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-FROM指令\n制定基础镜像，以一个镜像为基础，在这个基础镜像上进行定制。一个Dockerfile中FORM是必须的指令，并且必须是第一个指令。如果想用一个空白的基础镜像，可以使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>scratch ，scratch表示一个空白镜像。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-RUN指令\n用于在容器中执行命令。有两种格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@ol</span>-(#shell格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-gray-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>RUN&amp;nbsp;&lt;命令&gt;  就像在命令行中输入命令一样。#exec格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-gray-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>RUN&amp;nbsp;[\"可执行命令\",\"参数1\",\"参数2\"]) \n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS: Dockerfile中每一个指令就会建立一层镜像，如： <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; RUN apt-get update\n&gt; RUN make -C /usr/src/redis]@ 创建了两层，完全没有意义，平白增加了构建部署的时间。所以应该这么写：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; RUN apt-get update  \\\n&amp;&amp; make -C /usr/src/redis]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-COPY指令\n将从构建上下文目录中的&lt;源路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置。格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-#f2f2f2-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>COPY&amp;nbsp;&lt;源路径&gt;...&lt;目标路径&gt; 、 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-#f2f2f2-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>COPY&amp;nbsp;[\"&lt;源路径1&gt;\",...\"&lt;目标路径&gt;\"] 。源路径可以是多个，可以是通配符（Go的filepath.Match）\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-ADD指令（不推荐）\nADD指令和COPY的格式和功能基本一样。只不过在COPY上增加了一些功能。ADD中的&lt;源文件路径&gt;可以使用一个URL，Docker引擎会去下载文件放到&lt;目标路径&gt;。若下载的是个压缩包，需要进行解压缩。所以不如直接使用\\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>RUN  指令，然后用wget或者curl来下载文件。如果&lt;源文件&gt;为一个tar压缩文件的话，压缩格式为gzip、bzip2、xz，ADD指令会自动解压缩这个压缩文件到&lt;目标路径&gt;。如果需要直接复制个压缩文件到&lt;目标路径&gt;那就只能用COPY了。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>总结： 所有文件复制均使用COPY，仅在需要自动解压缩的场合使用ADD。&lt;源文件路径&gt;可以是docker容器外的上下文路径，也就是说可以将docker外的文件拷贝到docker容器内。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-ENV指令\n这个指令就是配置个环境变量。 如配置JAVA_HOME环境变量：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[ENV JAVA_HOME /software/jdk7]@  \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-CMD指令\n用于指定默认的容器主进程的启动命令。也有两种格式：shell和exec，推荐使用exec，shell的本质就是exec，如：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[CMD echo $HOME]@等价于<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[CMD [\"sh\",\"-c\",\"echo $HOME\"]]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-ENTRYPOINT指令\n和CMD目的一样，都是指定容器启动程序及参数。来看下CMD和ENTRYPOINT两个指令的使用场景。\n我们要得知当前公网IP。那么可以用CMD实现：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[RROM ubuntu:16.04\nRUN apt-get update \\\n&amp;&amp; apt-get install -y curl \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\nCMD [\"curl\",\"-s\",\"http://ip.cn\"]]@ \\\n运行<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build -t seeip .\n&gt; docker run seeip]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-result-@[当前 IP：124.202.xxx.110 来自：北京市 鹏博士]@\n但是当我们需要展示HTTP头信息的时候，需要在curl中添加<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-i  参数。\n如果这样加是肯定不行的：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker run seeip -i]@ 因为镜像名seeip后面是<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>command  ，运行时<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-i  会替换Dockerfile中的CMD值。\n我们需要在Dockerfile中这样写<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[CMD [\"curl\",\"-s\",\"http://ip.cn\",\"-i\"]]@ \\\n在我们不修改Dockerfile的情况下，我们可以直接吧CMD替换为ENTRYPOINT：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[RROM ubuntu:16.04\nRUN apt-get update \\\n&amp;&amp; apt-get install -y curl \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\nENTRYPOINT [\"curl\",\"-s\",\"http://ip.cn\"]]@ \\\n这样我们就可以使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>docker&amp;nbsp;run&amp;nbsp;seeip&amp;nbsp;-i  来查看HTTP头信息了。\n\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-Docker构建镜像（build） <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@hr</span>- \\\n写好了Dockerfile后，就可以开始构建镜像了，使用docker build。格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build [选项] &lt;上下文路径/URL/-&gt;]@ 如：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&amp;gt; docker build -t nginx:3.0 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>.  ]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS: 注意最后面那个<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>. ，这个点表示的上下文。build后的这个路径可以使用上下文（当前目录）来指定文件，也可以使用一个URL来指定。一般会将Dockerfile也放在上下文下。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-使用git repo进行构建\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build https://github.com/xxx.git]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-使用tar包进行构建\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build http://www.xx.com/xx.tar.gz]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-从标准输入中读取Dockerfile进行构建\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build - &lt; Dockerfile]@ 或 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[cat Dockerfile | docker build -]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-从标准输入中读取上下文压缩包进行构建\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build - &lt; context.tar.gz]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-指定某个文件作为Dockerfile构建镜像（默认是上下文中的Dockerfile文件作为Dockerfile）\n主要使用的是docker build中的<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-f  参数。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build -t seeip @fc-red-&gt;-f  @fc-red-&gt;./demo-dockerfile  .]@ \n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-Docker虚悬镜像\n没有仓库名，没有标签&lt;none&gt;，这类镜像一般都已经失去价值的镜像，可以随意删除。\n查看虚悬镜像：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker images -q -f dangling=true]@ \\\n删除虚悬镜像：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker rmi $(docker images -q -f dangling=true)]@\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-Docker镜像源配置\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[http://www.cnblogs.com/anliven/p/6218741.html]参考1\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[https://cr.console.aliyun.com/]使用aliyun加速器。\n&lt;div&gt;<span contenteditable=\"false\" style=\"color: rgb(0, 192, 255);\">@pre</span>-@[<pre style=\"overflow: auto; border-radius: 0.5rem;padding: 0.5rem;box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; white-space: pre-wrap; display: block; padding: 9.5px; margin: 0px 0px 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: inherit; padding: 0px; color: inherit; white-space: pre-wrap; background-color: transparent; border-radius: 0px;\">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -\n</code></pre><h3 id=\"-docker-\" class=\"ng-scope\" style=\"box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, &quot;Microsoft YaHei&quot;; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 20px; margin-bottom: 10px; font-size: 24px;\">如何使用Docker加速器</h3><h4 id=\"-docker-1-10-\" class=\"ng-scope\" style=\"box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, &quot;Microsoft YaHei&quot;; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 10px; margin-bottom: 10px; font-size: 18px;\">针对Docker客户端版本大于1.10的用户</h4><p class=\"ng-scope\" style=\"box-sizing: border-box; margin: 0px 0px 10px;\">您可以通过修改daemon配置文件<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; background-color: rgb(249, 242, 244); border-radius: 4px;\">/etc/docker/daemon.json</code>来使用加速器：</p><pre class=\"ng-scope\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; white-space: pre-wrap; display: block; padding: 9.5px; margin: 0px 0px 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\"><code class=\"ng-binding\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: inherit; padding: 0px; color: inherit; white-space: pre-wrap; background-color: transparent; border-radius: 0px;\">sudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'\n{\n  \"registry-mirrors\": [\"https://33uenx7u.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n</code></pre><h4 id=\"-docker-1-10-\" class=\"ng-scope\" style=\"box-sizing: border-box; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, &quot;Microsoft YaHei&quot;; font-weight: 500; line-height: 1.1; color: inherit; margin-top: 10px; margin-bottom: 10px; font-size: 18px;\">针对Docker客户的版本小于等于1.10的用户</h4><p class=\"ng-scope\" style=\"box-sizing: border-box; margin: 0px 0px 10px;\">或者想配置启动参数，可以使用下面的命令将配置添加到<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; background-color: rgb(249, 242, 244); border-radius: 4px;\">docker daemon</code>的启动参数中。</p><ul class=\"ng-scope\" style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px;\"><li style=\"box-sizing: border-box;\">系统要求 CentOS 7 以上，Docker 1.9 以上。<pre style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; white-space: pre-wrap; display: block; padding: 9.5px; margin: 0px 0px 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: inherit; padding: 0px; color: inherit; white-space: pre-wrap; background-color: transparent; border-radius: 0px;\">sudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service\n</code></pre></li><li style=\"box-sizing: border-box;\">Docker 1.12 以下版本使用 docker daemon 命令<pre style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; white-space: pre-wrap; display: block; padding: 9.5px; margin: 0px 0px 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: inherit; padding: 0px; color: inherit; white-space: pre-wrap; background-color: transparent; border-radius: 0px;\">sudo sed -i \"s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=https://qxx96o44.mirror.aliyuncs.com|g\" /etc/systemd/system/docker.service\n</code></pre></li><li style=\"box-sizing: border-box;\">Docker 1.12 及以上版本使用 dockerd 命令<pre style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px; white-space: pre-wrap; display: block; padding: 9.5px; margin: 0px 0px 10px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px;\"><code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: inherit; padding: 0px; color: inherit; white-space: pre-wrap; background-color: transparent; border-radius: 0px;\">sudo sed -i \"s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd --registry-mirror=https://qxx96o44.mirror.aliyuncs.com|g\" /etc/systemd/system/docker.service\nsudo systemctl daemon-reload\nsudo service docker restart\n</code></pre>]@ &lt;/div&gt; 、\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h3</span>-配置镜像源精简篇\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; systemctl enable docker #启用服务\n# 启用成功后会出现如下字样：\n# <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-Created&amp;nbsp;symlink&amp;nbsp;from&amp;nbsp;/etc/systemd/system/multi-user.target.wants/docker.service&amp;nbsp;to&amp;nbsp;/etc/systemd/system/docker.service. \n&gt; vi /etc/systemd/system/multi-user.target.wants/docker.service\n# 修改如下内容\n# ExecStart=/usr/bin/dockerd <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>--registry-mirror=https://33uenx7u.mirror.aliyuncs.com \n&gt; systemctl daemon-reload\n&gt; systemctl restart docker]@ 这就完事了。检验一下。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; ps -ef | grep docker\nroot      14041      1  1 09:08 ?        00:00:00 /usr/bin/dockerd <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@b</span>---registry-mirror=https://33uenx7u.mirror.aliyuncs.com \nroot      14044  14041  0 09:08 ?        00:00:00 docker-containerd -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --metrics-inter\nval=0 --start-timeout 2m --state-dir /var/run/docker/libcontainerd/containerd --shim docker-containerd-shim --runtime docker-runc\nroot      14153  13140  0 09:08 pts/1    00:00:00 grep --color=auto docker]@ \\\n \n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-搭建本地Docker库\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h3</span>-使用registry镜像创建私有仓库 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@tab</span>-\\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-安装registry\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker pull registry]@\\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-通过registr镜像启动一个容器\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker run -d -p 5000:5000 -v <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-green-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>本地目录 :<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-orange-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>/var/lib/registry  registry # <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>--v  参数将镜像文件存放于本地目录中。不加这个参数默认会存放在容器的 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-/var/lib/registry&amp;nbsp;(v1中是/tmp/registry)  目录下，容器被删，镜像也就没了。]@ \n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@tip</span>-@[<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS:  <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-v  参数用于创建一个容器的数据卷。如: <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>docker&amp;nbsp;run&amp;nbsp;-d&amp;nbsp;-P&amp;nbsp;--name&amp;nbsp;web&amp;nbsp;-v&amp;nbsp;/webapp&amp;nbsp;springboot&amp;nbsp;bash  表示使用 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@b</span>-springboot  镜像创建一个名为 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@b</span>-web  \n的容器，并在容器中创建一个数据卷挂载到<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@b</span>-/webapp  目录。&lt;br&gt;\n还有一中用法就是像上面的一样，将本机中的目录挂载到容器目录中作为一个数据卷。]@ \n这时，私有仓库就在本地启动了，监听的端口号为5000。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-将准备好的要上传到私有仓库的镜像标记\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[# 格式：docker tag REPOSITY【:TAG】 【私有仓库地址(包括端口)/】<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-lightgray-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>【USERNAME/】 NAME【:TAG】 \n# 如：将如下镜像centos上传到私有仓库为 p-centos\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ncentos              1.0                 745059f48e59        2 weeks ago         504 MB\n&gt; docker tag centos:1.0 192.168.1.166:5000/p-centos\n&gt; docker push 192.169.1.166:5000/p-centos # 上传标记镜像到私有仓库]@ \\\n然而事情并非那么顺利。出现如下错误：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@tip</span>-@[http: server gave HTTP response to HTTPS client]@ 因为docker registry 采用了https协议。解决办法如下：（不同Linux系统，不同版本的docker解决方法可能不相同）\n在 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>/etc/docker/daemon.json  中添加<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@tip</span>-@[&amp;quot;insecure-registries&amp;quot;:[&amp;quot;192.168.67.129:5000&amp;quot;]]@\\\n相当于一个“白名单”。\n之后依次执行如下命令：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; systemctl daemon-reload\n&gt; systemctl restart docker]@\\\n重新启动registry容器。然后发现就可以推送镜像了。\n值得注意的是由于docker重新启动，所以registry私人仓库镜像会被关闭，如果没有启动就推送，就会出现：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"edit-span\">@tip</span>-@[dial tcp 192.168.67.129:5000: getsockopt: connection refused]@ \nso on\n\n</pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre>",
  "noteName": "2017-4-24",
  "tags": "Docker"
}