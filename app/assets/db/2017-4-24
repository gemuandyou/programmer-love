{
  "noteData": "<pre><pre><span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h1</span>-Docker（ubuntu）\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@url</span>-[https://docs.docker.com/]Document\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-查看Docker镜像列表\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker images]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-加载镜像，启动一个进程\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker run --name 容器名 -d -p 80:80 镜像名（标签）\n&gt; docker run -it --name 容器名 镜像名]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-查看Docker容器列表\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker ps]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-删除Docker容器\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker rm 容器名/容器ID]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-删除Docker镜像\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker rmi 镜像ID]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-进入Docker容器中\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker exec -it 容器名 bash]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS: <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-it 中i表示interaction，t表示terminal。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker attach 容器名]@\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h6</span>-结束docker容器\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker stop 容器ID]@ \netc\n\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-Docker定制镜像（Dockerfile） <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@hr</span>- \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-FROM指令\n制定基础镜像，以一个镜像为基础，在这个基础镜像上进行定制。一个Dockerfile中FORM是必须的指令，并且必须是第一个指令。如果想用一个空白的基础镜像，可以使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>scratch ，scratch表示一个空白镜像。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-RUN指令\n用于在容器中执行命令。有两种格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@ol</span>-(#shell格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-gray-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>RUN&amp;nbsp;&lt;命令&gt;  就像在命令行中输入命令一样。#exec格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-gray-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>RUN&amp;nbsp;[\"可执行命令\",\"参数1\",\"参数2\"]) \n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS: Dockerfile中每一个指令就会建立一层镜像，如： <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; RUN apt-get update\n&gt; RUN make -C /usr/src/redis]@ 创建了两层，完全没有意义，平白增加了构建部署的时间。所以应该这么写：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; RUN apt-get update  \\\n&amp;&amp; make -C /usr/src/redis]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-COPY指令\n将从构建上下文目录中的&lt;源路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置。格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-#f2f2f2-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>COPY&amp;nbsp;&lt;源路径&gt;...&lt;目标路径&gt; 、 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-#f2f2f2-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>COPY&amp;nbsp;[\"&lt;源路径1&gt;\",...\"&lt;目标路径&gt;\"] 。源路径可以是多个，可以是通配符（Go的filepath.Match）\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-ADD指令（不推荐）\nADD指令和COPY的格式和功能基本一样。只不过在COPY上增加了一些功能。ADD中的&lt;源文件路径&gt;可以使用一个URL，Docker引擎会去下载文件放到&lt;目标路径&gt;。若下载的是个压缩包，需要进行解压缩。所以不如直接使用\\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>RUN  指令，然后用wget或者curl来下载文件。如果&lt;源文件&gt;为一个tar压缩文件的话，压缩格式为gzip、bzip2、xz，ADD指令会自动解压缩这个压缩文件到&lt;目标路径&gt;。如果需要直接复制个压缩文件到&lt;目标路径&gt;那就只能用COPY了。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>总结： 所有文件复制均使用COPY，仅在需要自动解压缩的场合使用ADD。&lt;源文件路径&gt;可以是docker容器外的上下文路径，也就是说可以将docker外的文件拷贝到docker容器内。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-ENV指令\n这个指令就是配置个环境变量。 如配置JAVA_HOME环境变量：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"edit-span\">@code</span>--@[ENV JAVA_HOME /software/jdk7]@  \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-CMD指令\n用于指定默认的容器主进程的启动命令。也有两种格式：shell和exec，推荐使用exec，shell的本质就是exec，如：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[CMD echo $HOME]@等价于<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[CMD [\"sh\",\"-c\",\"echo $HOME\"]]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-ENTRYPOINT指令\n和CMD目的一样，都是指定容器启动程序及参数。来看下CMD和ENTRYPOINT两个指令的使用场景。\n我们要得知当前公网IP。那么可以用CMD实现：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[RROM ubuntu:16.04\nRUN apt-get update \\\n&amp;&amp; apt-get install -y curl \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\nCMD [\"curl\",\"-s\",\"http://ip.cn\"]]@ \\\n运行<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build -t seeip .\n&gt; docker run seeip]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>-result-@[当前 IP：124.202.xxx.110 来自：北京市 鹏博士]@\n但是当我们需要展示HTTP头信息的时候，需要在curl中添加<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-i  参数。\n如果这样加是肯定不行的：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker run seeip -i]@ 因为镜像名seeip后面是<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>command  ，运行时<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-i  会替换Dockerfile中的CMD值。\n我们需要在Dockerfile中这样写<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[CMD [\"curl\",\"-s\",\"http://ip.cn\",\"-i\"]]@ \\\n在我们不修改Dockerfile的情况下，我们可以直接吧CMD替换为ENTRYPOINT：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[RROM ubuntu:16.04\nRUN apt-get update \\\n&amp;&amp; apt-get install -y curl \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\nENTRYPOINT [\"curl\",\"-s\",\"http://ip.cn\"]]@ \\\n这样我们就可以使用<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>docker&amp;nbsp;run&amp;nbsp;seeip&amp;nbsp;-i  来查看HTTP头信息了。\n\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-Docker构建镜像（build） <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@hr</span>- \\\n写好了Dockerfile后，就可以开始构建镜像了，使用docker build。格式：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build [选项] &lt;上下文路径/URL/-&gt;]@ 如：\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&amp;gt; docker build -t nginx:3.0 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>.  ]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@i</span>-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fc</span>-red-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>PS: 注意最后面那个<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>. ，这个点表示的上下文。build后的这个路径可以使用上下文（当前目录）来指定文件，也可以使用一个URL来指定。一般会将Dockerfile也放在上下文下。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-使用git repo进行构建\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build https://github.com/xxx.git]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-使用tar包进行构建\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build http://www.xx.com/xx.tar.gz]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-从标准输入中读取Dockerfile进行构建\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build - &lt; Dockerfile]@ 或 <span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[cat Dockerfile | docker build -]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-从标准输入中读取上下文压缩包进行构建\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build - &lt; context.tar.gz]@ \\\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h4</span>-指定某个文件作为Dockerfile构建镜像（默认是上下文中的Dockerfile文件作为Dockerfile）\n主要使用的是docker build中的<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@fbc</span>-yellow-<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\">&gt;</span>-f  参数。\n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker build -t seeip @fc-red-&gt;-f  @fc-red-&gt;./demo-dockerfile  .]@ \n<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@h2</span>-Docker虚悬镜像\n没有仓库名，没有标签&lt;none&gt;，这类镜像一般都已经失去价值的镜像，可以随意删除。\n查看虚悬镜像：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker images -q -f dangling=true]@ \\\n删除虚悬镜像：<span style=\"font-style: italic; color: #00c0ff;\" contenteditable=\"false\" class=\"\">@code</span>--@[&gt; docker rmi $(docker images -q -f dangling=true)]@\netc</pre></pre>",
  "noteName": "2017-4-24"
}